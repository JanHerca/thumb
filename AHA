
You can bound the far clipping plane of a light projection to the far extent of the view frustum, since you'll never see shadows cast past that point anyway. The near clipping plane of a light projection must extend past the near extent of the view frustum, however, since objects closer to the light may cast shadows into the view frustum.

This is exactly opposite of view frustum testing, where the near plane is important, and the far plane is unimportant. By sneaking the light's far plane into the near plane slot during frustum testing, We can trick the view far-clip-finder into computing the near-clip distance of a lightsource.

Computing the frustum union of a stereo projection is tougher than it initially seems.  The left plane is determined by the position of the right eye, and vice versa.

This function computes a nice mixing parameter based on texture coordinate derivatives: float G = 1.0 - abs(log(g.x / g.y) / log(N)); where N is a configurable parameter.

The virtual mip-map may be stored in memory in the old style: a 2x2 2D texture. It will need to be rounded out to powers of two to work properly... the 169x85 BMNG map is stored in a 512x256 texture.

When picking the optimal subset of a hierarchy (of, for example, patches or mipmap pages) it is not necessary to compute the inherent value of a node. It is only necessary to compare the value of two nodes. Given a maximum node constraint, the output can still be determined optimally.