Cracking may be occuring because one interpolant is k while the other is k-1


Bouncing between eyes and tiles screws with patch hierarchy coherence
    nearly all leaves are invalidated when the tile changes

define a plural frame buffer?
    give an array of
        view frustum planes
        view point
        frame area
    frustum union planes

for each patch
    given the sphere area (normal and radius)
    determine the eye area (x0 y0 x1 y1)
    determine the frame area (x0 y0 x1 y1)
    determine the pixel density (sphere area / frame area)

    for each geomap
        for each tile touching the sphere area
            with at least the maximum pixel density
            enqueue texture object and frame area

    for each queued texture object
        render all frame areas (or just the union of all frame areas?)


send [sphere area, frame rect] pairs to the root of the geomap
    let tiles accumulate rects
draw the geomap

(this could enable smart LOD blending)


-------------------------------------------------------------------------------

Rationalle: Don't count VRAM usage and buffer storage separately.
    Just let the GL handle it.
    The GL can reload its own internal buffers faster anyway
    Don't keep buffers.  Delete after upload.  Reduces redundancy


A file request is
    a filename
    a pointer to a tile
    a pointer to a geomap?

A file response is
    a pixel buffer
    a pointer to a tile

* test and data request need to be combined...

A tile is presented with a sphere area and screen area
    if the sphere area overlaps with this tile's sphere area
        if this tile is a leaf or its density is greater than requested
            I'm it
        if I'm not it send the areas to any/all children
        if none of them are it
            I'm it
        if I'm it
            enqueue this tile on the draw queue
            add the screen area to this tile's draw area

A tile needs to draw itself
    append self onto the geomap LRU queue

    if state is ejected
        acquire the geomap static queue mutex
        enqueue the file request in the geomap static request queue
        release the geomap static queue mutex
        post the request queue semaphore
        set state to waiting

    if state is ready
        bind the texture

A tile is issued a texture object
    store it
    set state to ready

A tile is ordered to eject
    delete the texture object
    set state to ejected

geomap cycle responses
    while response queue is not empty

        while the geomap local texture quantity is too large
           pop head of LRU tile queue
           order LRU tile to eject
           update the geomap local texture quantity

        upload the texture
        update the geomap texture quantity

        issue the texture object to the tile

geomap load thread
    loop
        wait on the request queue semaphore

        acquire the geomap static queue mutex
        pop the request from the queue
        release the geomap static queue mutex

        allocate a buffer
        load the file

        acquire the geomap local response queue mutex
        enqueue the file response in the geomap local response queue mutex
        release the geomap local response queue mutex

